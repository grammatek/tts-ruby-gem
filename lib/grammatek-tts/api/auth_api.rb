=begin
#TTS API

#This API gives access to Grammatek ehf advanced text to speech services. It provides endpoints to query all available voices and synthesize speech from given text for a particular voice. You can synthesize speech in several audio formats and different sample rates. Please authenticate with your client credentials via the /auth/v1 endpoint to receive a temporary access token for all API endpoints. This token is valid only for a certain time and you need to re-authenticate after it has expired. Please contact Grammatek via info@grammatek.com to receive your individual client credentials. 

The version of the OpenAPI document: v1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module GTTS
  class AuthApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get token info and expiration time
    # Retrieve the absolute date/expiration time of the given access token. If the given token is valid, a 200 response is returned with the expiration date/time of the token. If the token is invalid, a 401 response is returned. Providing the access token as Bearer token in the Authorization header is required. 
    # @param [Hash] opts the optional parameters
    # @return [TokenInfoResponse]
    def get_token_info(opts = {})
      data, _status_code, _headers = get_token_info_with_http_info(opts)
      data
    end

    # Get token info and expiration time
    # Retrieve the absolute date/expiration time of the given access token. If the given token is valid, a 200 response is returned with the expiration date/time of the token. If the token is invalid, a 401 response is returned. Providing the access token as Bearer token in the Authorization header is required. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenInfoResponse, Integer, Hash)>] TokenInfoResponse data, response status code and response headers
    def get_token_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthApi.get_token_info ...'
      end
      # resource path
      local_var_path = '/auth/v1/token-info'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TokenInfoResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthApi.get_token_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthApi#get_token_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Authenticate and receive access token
    # Authenticate with `client_id` and `client_secret` to receive a temporary access token. The response is a JSON object with 2 entries: `access_token` and `expires_in`. The former provides the access token itself, the latter is the expiration time in seconds of the returned token after which it is invalidated and can no longer be used. You need to provide a valid access token as Bearer token in the Authorization header for all other API endpoints. If you encounter a 401 error in one of the other endpoints, your access token has expired and you need to re-authenticate. You can use the endpoint /auth/v1/token-info to check the absolute expiration date/time of the returned access token for e.g. caching purposes. 
    # @param auth_request [AuthRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AuthResponse]
    def post_auth(auth_request, opts = {})
      data, _status_code, _headers = post_auth_with_http_info(auth_request, opts)
      data
    end

    # Authenticate and receive access token
    # Authenticate with &#x60;client_id&#x60; and &#x60;client_secret&#x60; to receive a temporary access token. The response is a JSON object with 2 entries: &#x60;access_token&#x60; and &#x60;expires_in&#x60;. The former provides the access token itself, the latter is the expiration time in seconds of the returned token after which it is invalidated and can no longer be used. You need to provide a valid access token as Bearer token in the Authorization header for all other API endpoints. If you encounter a 401 error in one of the other endpoints, your access token has expired and you need to re-authenticate. You can use the endpoint /auth/v1/token-info to check the absolute expiration date/time of the returned access token for e.g. caching purposes. 
    # @param auth_request [AuthRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthResponse, Integer, Hash)>] AuthResponse data, response status code and response headers
    def post_auth_with_http_info(auth_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthApi.post_auth ...'
      end
      # verify the required parameter 'auth_request' is set
      if @api_client.config.client_side_validation && auth_request.nil?
        fail ArgumentError, "Missing the required parameter 'auth_request' when calling AuthApi.post_auth"
      end
      # resource path
      local_var_path = '/auth/v1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(auth_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"AuthApi.post_auth",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthApi#post_auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
