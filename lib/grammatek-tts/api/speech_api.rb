=begin
#TTS API

#This API gives access to Grammatek ehf text to speech services.

The version of the OpenAPI document: v0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module Grammatek::TTS
  class SpeechApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # TTS - Synthesize speech from text
    # @param [Hash] opts the optional parameters
    # @option opts [SynthesizeSpeechRequest] :synthesize_speech_request 
    # @return [Object]
    def speech_post(opts = {})
      data, _status_code, _headers = speech_post_with_http_info(opts)
      data
    end

    # TTS - Synthesize speech from text
    # @param [Hash] opts the optional parameters
    # @option opts [SynthesizeSpeechRequest] :synthesize_speech_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def speech_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpeechApi.speech_post ...'
      end
      # resource path
      local_var_path = '/speech'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['audio/mpeg', 'audio/ogg', 'application/x-json-stream', 'audio/x-wav', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'synthesize_speech_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SpeechApi.speech_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpeechApi#speech_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Describe/query available voices
    # @param [Hash] opts the optional parameters
    # @option opts [String] :engine Specify which engine to use
    # @option opts [String] :language_code The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don&#39;t specify this optional parameter, all available voices are returned.  example: is-IS
    # @return [Array<Voice>]
    def voices_get(opts = {})
      data, _status_code, _headers = voices_get_with_http_info(opts)
      data
    end

    # Describe/query available voices
    # @param [Hash] opts the optional parameters
    # @option opts [String] :engine Specify which engine to use
    # @option opts [String] :language_code The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don&#39;t specify this optional parameter, all available voices are returned.  example: is-IS
    # @return [Array<(Array<Voice>, Integer, Hash)>] Array<Voice> data, response status code and response headers
    def voices_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpeechApi.voices_get ...'
      end
      allowable_values = ["standard"]
      if @api_client.config.client_side_validation && opts[:'engine'] && !allowable_values.include?(opts[:'engine'])
        fail ArgumentError, "invalid value for \"engine\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/voices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'Engine'] = opts[:'engine'] if !opts[:'engine'].nil?
      query_params[:'LanguageCode'] = opts[:'language_code'] if !opts[:'language_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Voice>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SpeechApi.voices_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpeechApi#voices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
