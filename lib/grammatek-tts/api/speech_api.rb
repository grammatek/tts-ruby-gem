=begin
#TTS API

#This API gives access to Grammatek ehf advanced text to speech services. It provides endpoints to query all available voices and synthesize speech from given text for a particular voice. You can synthesize speech in several audio formats and different sample rates. Please authenticate with your client credentials via the /auth/v1 endpoint to receive a temporary access token for all API endpoints. This token is valid only for a certain time and you need to re-authenticate after it has expired. Please contact Grammatek via info@grammatek.com to receive your individual client credentials. 

The version of the OpenAPI document: v1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module GTTS
  class SpeechApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Describe/query available voices
    # Describe/query available voices. Providing the access token as Bearer token in the Authorization header is required. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :engine Specify which engine to use
    # @option opts [String] :language_code The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don&#39;t specify this optional parameter, all available voices are returned.  example: is-IS
    # @return [Array<Voice>]
    def get_voices(opts = {})
      data, _status_code, _headers = get_voices_with_http_info(opts)
      data
    end

    # Describe/query available voices
    # Describe/query available voices. Providing the access token as Bearer token in the Authorization header is required. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :engine Specify which engine to use
    # @option opts [String] :language_code The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don&#39;t specify this optional parameter, all available voices are returned.  example: is-IS
    # @return [Array<(Array<Voice>, Integer, Hash)>] Array<Voice> data, response status code and response headers
    def get_voices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpeechApi.get_voices ...'
      end
      allowable_values = ["standard"]
      if @api_client.config.client_side_validation && opts[:'engine'] && !allowable_values.include?(opts[:'engine'])
        fail ArgumentError, "invalid value for \"engine\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/tts/v1/voices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'Engine'] = opts[:'engine'] if !opts[:'engine'].nil?
      query_params[:'LanguageCode'] = opts[:'language_code'] if !opts[:'language_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Voice>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SpeechApi.get_voices",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpeechApi#get_voices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # TTS - Synthesize speech from text
    # TTS - Synthesize speech from text. Please provide the following required parameters:    - OutputFormat (mp3, ogg_vorbis, pcm, json)   - Text (input text to synthesize)   - VoiceId (voice ID to use for the synthesis)  You can also provide the following optional parameters:    - SampleRate (audio frequency in Hz, supported values: 8000, 16000, 22050)   - SpeechMarkTypes (type of speech marks to return, supported values: word)   - Engine (engine to use, currently only vaöue 'standard' is supported)   - LanguageCode (language code to use, only 'is-IS' is supported)   - TextType (type of input text, supported values: 'text', 'ssml')   - LexiconNames (list of lexicon names to use, currently this is not supported)  If TextType 'ssml' is provided: we only support a subset of tags. Please contact us for more information.  In case the chosen output format is json, the speech marks are returned in the response body as JSON. No audio is returned in that case. Therefore, if you need the audio, you need to make a second request with the same parameters but a different output format.  Providing the access token as Bearer token in the Authorization header is required. 
    # @param [Hash] opts the optional parameters
    # @option opts [SynthesizeSpeechRequest] :synthesize_speech_request 
    # @return [Object]
    def post_speech(opts = {})
      data, _status_code, _headers = post_speech_with_http_info(opts)
      data
    end

    # TTS - Synthesize speech from text
    # TTS - Synthesize speech from text. Please provide the following required parameters:    - OutputFormat (mp3, ogg_vorbis, pcm, json)   - Text (input text to synthesize)   - VoiceId (voice ID to use for the synthesis)  You can also provide the following optional parameters:    - SampleRate (audio frequency in Hz, supported values: 8000, 16000, 22050)   - SpeechMarkTypes (type of speech marks to return, supported values: word)   - Engine (engine to use, currently only vaöue &#39;standard&#39; is supported)   - LanguageCode (language code to use, only &#39;is-IS&#39; is supported)   - TextType (type of input text, supported values: &#39;text&#39;, &#39;ssml&#39;)   - LexiconNames (list of lexicon names to use, currently this is not supported)  If TextType &#39;ssml&#39; is provided: we only support a subset of tags. Please contact us for more information.  In case the chosen output format is json, the speech marks are returned in the response body as JSON. No audio is returned in that case. Therefore, if you need the audio, you need to make a second request with the same parameters but a different output format.  Providing the access token as Bearer token in the Authorization header is required. 
    # @param [Hash] opts the optional parameters
    # @option opts [SynthesizeSpeechRequest] :synthesize_speech_request 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_speech_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpeechApi.post_speech ...'
      end
      # resource path
      local_var_path = '/tts/v1/speech'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['audio/mpeg', 'application/octet-stream', 'audio/ogg', 'application/x-json-stream', 'audio/x-wav', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'synthesize_speech_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"SpeechApi.post_speech",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpeechApi#post_speech\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
